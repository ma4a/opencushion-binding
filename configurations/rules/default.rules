import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*

var Timer timer = null
var Timer delay = null
var int l_time = 10
var int l_be_s_a = 2
var int l_be_s_b = 4
var int l_be_s_c = 5

rule "startup"
when
System started
then	
	postUpdate(duration,l_time)
	postUpdate(be_s_a,l_be_s_a)
	postUpdate(be_s_b,l_be_s_b)
	postUpdate(be_s_c,l_be_s_c)

end

rule "duration changend"
when
	Item duration received update
then
	l_time = (duration.state as DecimalType).intValue
end

rule "timer cushen"
when
	Item weight received update
then
	
	var Number weight_st = weight.state as DecimalType
	if(weight_st > 2.0) {
		postUpdate(sitzt, "Ja")
		if(timer==null) {
			// first ON command, so create a timer to turn the light off again
			timer = createTimer(now.plusSeconds(l_time)) [|
				postUpdate(alarm, "ON")
				playSound("doorbell.mp3")
				switch (l_be_s_a) {
				case 2: {networkLamp_A.sendCommand(ON)}
				case 3: {networkLamp_A.sendCommand(OFF)}
				}
				switch (l_be_s_b) {
				case 2: {networkLamp_B.sendCommand(ON)}
				case 3: {networkLamp_B.sendCommand(OFF)}
				}
				switch (l_be_s_c) {
				case 2: {networkLamp_C.sendCommand(ON)}
				case 3: {networkLamp_C.sendCommand(OFF)}
				}
				if(delay==null) {
			// first ON command, so create a timer to turn the light off again
			delay = createTimer(now.plusSeconds(3)) [|
				postUpdate(alarm, "ON")
				playSound("doorbell.mp3")
				switch (l_be_s_a) {
				case 4: {networkLamp_A.sendCommand(ON)}
				case 5: {networkLamp_A.sendCommand(OFF)}
				}
				switch (l_be_s_b) {
				case 4: {networkLamp_B.sendCommand(ON)}
				case 5: {networkLamp_B.sendCommand(OFF)}
				}
				switch (l_be_s_c) {
				case 4: {networkLamp_C.sendCommand(ON)}
				case 5: {networkLamp_C.sendCommand(OFF)}
				}
				
			]
		}
				
			]
		}
	} else {
		postUpdate(sitzt, "Nein")
		if(timer!=null) {
			postUpdate(alarm, "OFF")
			timer.cancel
			timer = null
			delay.cancel
			delay = null
			switch (l_be_s_a) {
				case 2: {networkLamp_A.sendCommand(OFF)}
				case 4: {networkLamp_A.sendCommand(OFF)}
				case 3: {networkLamp_A.sendCommand(ON)}
				case 5: {networkLamp_A.sendCommand(ON)}
				}
				switch (l_be_s_b) {
				case 2: {networkLamp_B.sendCommand(OFF)}
				case 4: {networkLamp_B.sendCommand(OFF)}
				case 3: {networkLamp_B.sendCommand(ON)}
				case 5: {networkLamp_B.sendCommand(ON)}
				}
				switch (l_be_s_c) {
				case 2: {networkLamp_C.sendCommand(OFF)}
				case 4: {networkLamp_C.sendCommand(OFF)}
				case 3: {networkLamp_C.sendCommand(ON)}
				case 5: {networkLamp_C.sendCommand(ON)}
				}
		}	
	}
end


rule "be_s_a changend"
when
	Item be_s_a received update
then
	l_be_s_a = (be_s_a.state as DecimalType).intValue
end

rule "be_s_b changend"
when
	Item be_s_b received update
then
	l_be_s_b = (be_s_b.state as DecimalType).intValue
end

rule "be_s_c changend"
when
	Item be_s_c received update
then
	l_be_s_c = (be_s_c.state as DecimalType).intValue
end
